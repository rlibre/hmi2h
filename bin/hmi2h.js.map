{
  "version": 3,
  "sources": ["../node_modules/commander/lib/error.js", "../node_modules/commander/lib/argument.js", "../node_modules/commander/lib/help.js", "../node_modules/commander/lib/option.js", "../node_modules/commander/lib/suggestSimilar.js", "../node_modules/commander/lib/command.js", "../node_modules/commander/index.js", "../src/main.ts", "../src/types.ts", "../node_modules/commander/esm.mjs"],
  "sourcesContent": ["/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n", "const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n", "const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns number\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {\n      const visibleOptions = ancestorCmd.options.filter((option) => !option.hidden);\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find(argument => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault = option.required || option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([helper.wrap(commandDescription, helpWidth, 0), '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n      if (globalOptionList.length > 0) {\n        output = output.concat(['Global Options:', formatList(globalOptionList), '']);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents = ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(`\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line === '\\n') return ''; // preserve empty lines\n      return ((i > 0) ? indentString : '') + line.trimEnd();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n", "const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {string | string[]} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {Object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @api private\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach(option => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = (preset !== undefined) ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\nexports.DualOptions = DualOptions;\n", "const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau\u2013Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n", "const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @api private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.trim().split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {Option | Argument} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @api private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [parseArg] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    // if (Object.keys(this._optionValues).length) {\n    //   throw new Error('call .storeOptionsAsProperties() before setting option values');\n    // }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n    * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli/implied\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n    * Get source of option value. See also .optsWithGlobals().\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n        if (legacyName !== this._name) {\n          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        // @ts-ignore\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(promiseChain, subCommand, 'preSubcommand');\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @api private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(subcommandName, [], [\n      this._helpLongFlag || this._helpShortFlag\n    ]);\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this.registeredArguments.length > 0 && this.registeredArguments[this.registeredArguments.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(argument, value, previous, invalidValueMessage);\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () => this._actionHandler(this.processedArgs));\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @api private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter(\n      (option) => {\n        const optionKey = option.attributeName();\n        if (this.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return this.getOptionValueSource(optionKey) !== 'default';\n      }\n    );\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName())\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {}\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {Object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @api private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));\n    };\n    this.options\n      .filter(option => (option.implied !== undefined) &&\n        hasCustomOptionValue(option.attributeName()) &&\n        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter(impliedKey => !hasCustomOptionValue(impliedKey))\n          .forEach(impliedKey => {\n            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @api private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());\n      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());\n      if (negativeOption && (\n        (negativeOption.presetArg === undefined && optionValue === false) ||\n        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)\n      )) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string | undefined} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName(); // [sic] not defined in constructor, partly legacy, partly only needed at root\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this.registeredArguments.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {string|null|Command}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors().reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._helpLongFlag) {\n      this.emit(this._helpLongFlag); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach(command => command.emit('afterAllHelp', context));\n  }\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n", "const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// createArgument, createCommand, and createOption are implicitly available as they are methods on program.\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n", "import * as fs from \"node:fs\"\r\nimport * as path from \"node:path\"\r\n\r\nimport { ObjTypes } from './types.js';\r\nimport { program } from \"commander\";\r\n\r\n\r\nconst ascii_decoder = new TextDecoder( \"ascii\" );\r\nconst utf8_decoder = new TextDecoder( \"utf-8\" );\r\n\r\n\r\n\r\nclass Reader {\r\n\t\r\n\tprivate buffer: Buffer;\r\n\tprivate offset: number;\r\n\t\r\n\tconstructor( buffer: Buffer ) {\r\n\t\tthis.buffer = buffer;\r\n\t\tthis.offset = 0;\r\n\t}\r\n\r\n\tseek( offset: number, from = 0 ) {\r\n\t\tif( from==0 ) {\r\n\t\t\tthis.offset = offset;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.offset += offset;\r\n\t\t}\r\n\t}\r\n\r\n\treadBool( ): boolean {\r\n\t\tconst rc = !!this.buffer.readInt8( this.offset );\r\n\t\tthis.offset += 1;\r\n\t\treturn rc;\r\n\t}\r\n\r\n\treadI8( ): number {\r\n\t\tconst rc = this.buffer.readInt8( this.offset );\r\n\t\tthis.offset += 1;\r\n\t\treturn rc;\r\n\t}\r\n\r\n\treadI16( ): number {\r\n\t\tconst rc = this.buffer.readInt16LE( this.offset );\r\n\t\tthis.offset += 2;\r\n\t\treturn rc;\r\n\t}\r\n\r\n\treadI32( ): number {\r\n\t\tconst rc = this.buffer.readInt32LE( this.offset );\r\n\t\tthis.offset += 4;\r\n\t\treturn rc;\r\n\t}\r\n\r\n\treadStr( length: number, utf8 = false ): string {\r\n\t\tconst data = Buffer.copyBytesFrom( this.buffer, this.offset, length );\r\n\t\tconst str = utf8 ? utf8_decoder.decode( data ) : ascii_decoder.decode( data );\r\n\t\tthis.offset += length\r\n\r\n\t\treturn str.replace( /\\0*$/g,'' )\r\n\t}\r\n\r\n\treadBuf( length: number ): Uint8Array {\r\n\t\tconst data = Buffer.copyBytesFrom( this.buffer, this.offset, length );\r\n\t\tthis.offset += length\r\n\t\treturn data;\r\n\t}\r\n}\r\n\r\n\r\nfunction isPage( name: string ) {\r\n\treturn name.endsWith(\".pa\")\r\n}\r\n\r\nfunction isImage( name: string ) {\r\n\treturn name.endsWith(\".i\")\r\n}\r\n\r\nfunction isImageSource( name: string ) {\r\n\treturn name.endsWith(\".is\")\r\n}\r\n\t\r\n\r\n\r\n\r\n\r\n/**\r\n * hmi is a folder / file architecture\r\n * \r\n * a first document catalog in of the form HMICatalog[] describing entries position/type and size of each items\r\n * itemds can ben Pages, Images...\r\n * for each page, a HMIPageCatalog[] describing elements inside it\r\n */\r\n\r\nclass HMICatalog {\r\n    name: \t string;\r\n\toffset:  number;\r\n\tsize: \t number;\r\n\tdeleted: boolean;\r\n\r\n\tread( reader: Reader ) {\r\n\t\tthis.name = reader.readStr( 16 );\r\n\t\tthis.offset   = reader.readI32( )\r\n        this.size    = reader.readI32( )\r\n        this.deleted = reader.readBool( )\r\n\t\treader.readI8();\r\n\t\treader.readI8();\r\n\t\treader.readI8();\r\n\t}\r\n}\r\n\r\n/**\r\n * \r\n */\r\n\r\nclass HMIPageCatalog  {\r\n    \r\n\toffset: number;\r\n\tsize: number;\r\n\r\n\tread( reader: Reader, base: number ) {\r\n\t\tthis.offset = base + reader.readI32( );\r\n\t\tthis.size = reader.readI32( );\r\n\t\treader.readI32( ); // ?\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * each page has a header, followed by a catalog of each element\r\n */\r\n\r\nclass HMIPageHeader {\r\n    crc: number;\r\n\tsize: number;\r\n\tcount: number;\r\n\tpassword: number;\t//?\r\n\tlocked: boolean;\r\n\tversion: number;\r\n\tname: string;\r\n\tu1: number;\r\n\tu2: number;\r\n\tu3: number;\r\n\tu4: Uint8Array;\r\n\r\n\tcatalog: HMIPageCatalog[];\r\n\r\n\tread( reader: Reader, offset: number ) {\r\n\r\n\t\treader.seek( offset );\r\n\r\n\t\tthis.crc = reader.readI32( );\r\n\t\tthis.size = reader.readI32( );\r\n\t\tthis.u1 = reader.readI32( );// header size\r\n\t\tthis.count = reader.readI32( );\r\n\t\tthis.password = reader.readI32( );\r\n\t\tthis.locked = reader.readBool( );\r\n\t\tthis.u2 = reader.readI8( ); //?\r\n\t\tthis.version = reader.readI8( );\r\n\t\tthis.u3 = reader.readI8( ); //?\r\n\t\tthis.name = reader.readStr( 16 ); //\r\n\t\tthis.u4 = reader.readBuf( 16 ); //?\r\n\t\t\r\n\r\n\t\tthis.catalog = [];\r\n\t\tconst self_base = offset+24+16+16;\r\n\r\n\t\tfor( let i=0; i<this.count; i++ ) {\r\n\t\t\tconst com = new HMIPageCatalog( );\r\n\t\t\tcom.read( reader, self_base )\r\n\t\t\tthis.catalog.push( com );\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * each element in a page is describe by that\r\n * a kind of tree saved in a linear format\r\n */\r\n\r\nclass HMIComponent {\r\n\tread( reader: Reader, cat: HMIPageCatalog ) {\r\n\t\treader.seek( cat.offset );\r\n\r\n\t\tconst vals: Record<string,any> = {};\r\n\t\t\r\n\t\twhile( 1 ) {\r\n\t\r\n\t\t\t// list is closed by a 0 sized element\r\n\t\t\tconst size = reader.readI32( );\r\n\t\t\tif( !size ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// read a root item\r\n\t\t\tconst ns = reader.readStr( size );\r\n\t\t\r\n\t\t\t// name-count -> the elment name with sub element count saved in a string.\r\n\t\t\tconst [name,sc] = ns.split( '-' );\r\n\t\t\tconst count = parseInt(sc);\r\n\t\t\t\r\n\t\t\t// followed by sub items\r\n\t\t\tconst data: Record<string,Uint8Array> = {}\r\n\t\t\tconst code: string[] = [];\r\n\r\n\t\t\tconst is_code = name.startsWith(\"codes\");\r\n\t\t\tconst is_att = name==\"att\";\r\n\t\t\t\r\n\t\t\tfor( let i=0; i<count; i++ ) {\r\n\t\t\t\tconst size = reader.readI32( );\r\n\t\t\t\t\r\n\t\t\t\t// in case of code, lines are stored directly\r\n\t\t\t\tif( is_code ) {\r\n\t\t\t\t\tcode.push( reader.readStr( size ) );\r\n\t\t\t\t}\r\n\t\t\t\t// else, the property name is stored in a 16 byte string\r\n\t\t\t\t// followed by a variable size buffer\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst pname = reader.readStr( 16 );\r\n\r\n\t\t\t\t\tlet value: any;\r\n\t\t\t\t\t\r\n\t\t\t\t\tswitch( pname ) {\r\n\t\t\t\t\t\t// all string props\r\n\t\t\t\t\t\tcase 'path':\r\n\t\t\t\t\t\tcase 'objname': \r\n\t\t\t\t\t\tcase 'dir':\t\t\r\n\t\t\t\t\t\tcase 'filter':\r\n\t\t\t\t\t\t\tvalue = reader.readStr( size-16 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'txt': \t\r\n\t\t\t\t\t\t\tvalue = reader.readStr( size-16, true );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// all number props (i enum them to find unknown ones)\r\n// clang-format off\r\n\t\t\t\t\t\tcase 'type':\tcase 'id':\t\t\tcase 'vscope':\t\r\n\t\t\t\t\t\tcase 'sta':\t\tcase 'psta':\t\tcase 'style':\t\r\n\t\t\t\t\t\tcase 'key':\t\tcase 'font':\t\tcase 'pw':\t\t\r\n\t\t\t\t\t\tcase 'val':\t\tcase 'txt_maxl':\tcase 'isbr': \t\r\n\t\t\t\t\t\tcase 'vvs0': \tcase 'vvs1': \t\tcase 'vvs2': \t\r\n\t\t\t\t\t\tcase 'vvs3': \tcase 'lenth': \t\tcase 'format': \t\r\n\t\t\t\t\t\tcase 'tim': \tcase 'en': \t\t\tcase 'dis': \t\r\n\t\t\t\t\t\tcase 'spax': \tcase 'spay': \t\tcase 'xcen': \t\r\n\t\t\t\t\t\tcase 'ycen': \tcase 'x': \t\t\tcase 'y': \t\t\r\n\t\t\t\t\t\tcase 'w': \t\tcase 'h': \t\t\tcase 'bco':\t\t\r\n\t\t\t\t\t\tcase 'bco1':\tcase 'bco2': \t\tcase 'pco': \t\r\n\t\t\t\t\t\tcase 'pco0': \tcase 'pco1': \t\tcase 'pco2': \t\r\n\t\t\t\t\t\tcase 'pco3': \tcase 'pic': \t\tcase 'pic1': \t\r\n\t\t\t\t\t\tcase 'pic2': \tcase 'picc': \t\tcase 'picc1': \t\r\n\t\t\t\t\t\tcase 'picc2': \tcase 'bpic': \t\tcase 'ppic': \t\r\n\t\t\t\t\t\tcase 'dez':\t\tcase 'border': \t\tcase 'borderc': \r\n\t\t\t\t\t\tcase 'borderw': case 'mode': \t\tcase 'maxval': \t\r\n\t\t\t\t\t\tcase 'minval': \tcase 'drag':\t\tcase 'dusup': \t\r\n\t\t\t\t\t\tcase 'aph': \tcase 'first': \t\tcase 'time': \t\r\n\t\t\t\t\t\tcase 'sendkey': case 'movex': \t\tcase 'movey': \t\r\n\t\t\t\t\t\tcase 'endx': \tcase 'endy': \t\tcase 'effect': \t\r\n\t\t\t\t\t\tcase 'lockobj': case 'groupid0':\tcase 'groupid1':\r\n\t\t\t\t\t\tcase 'ch': \t\tcase 'gdc': \t\tcase 'gdw': \t\r\n\t\t\t\t\t\tcase 'gdh': \tcase 'wid': \t\tcase 'hig': \t\r\n\t\t\t\t\t\tcase 'up': \t\tcase 'down': \t\tcase 'left': \t\r\n\t\t\t\t\t\tcase 'right': \tcase 'objWid': \t\tcase 'objHid': \t\r\n\t\t\t\t\t\tcase 'inittrue':case 'molloc': \t\tcase 'molloc_s':\r\n\t\t\t\t\t\tcase 'from':\tcase 'vid':\t\t\tcase 'path_m':\t\r\n\t\t\t\t\t\tcase 'loop':\tcase 'fps':\t\t\tcase 'stim':\t\r\n\t\t\t\t\t\tcase 'qty':\t\tcase 'init':\t\tcase 'format_m':\r\n\t\t\t\t\t\tcase 'dir_m':\tcase 'order':\t\tcase 'autoleft':\t\r\n\t\t\t\t\t\tcase 'filter_m':case 'txt_m':\t\tcase 'insert':\r\n\t\t\t\t\t\tcase 'delete':\tcase 'clear':\t\tcase 'maxval_y':\r\n\t\t\t\t\t\tcase 'val_y':\tcase 'maxval_x':\tcase 'val_x':\r\n\t\t\t\t\t\tcase 'leftshow':case 'drastate': \tcase 'disup': \r\n\t\t\t\t\t\tcase 'objHig': {\r\n// clang-format on\r\n\t\t\t\t\t\t\tswitch( size-16 ) {\r\n\t\t\t\t\t\t\t\tcase 1:\t\r\n\t\t\t\t\t\t\t\t\tvalue = reader.readI8( );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 2:\t\r\n\t\t\t\t\t\t\t\t\tvalue = reader.readI16( );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 4:\t\r\n\t\t\t\t\t\t\t\t\tvalue = reader.readI32( );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif( value==0 ) {\r\n\t\t\t\t\t\t\t\t//continue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\tconsole.log( \"unknown attribute name:\", pname )\r\n\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// special post \r\n\t\t\t\t\tswitch( pname ) {\r\n\t\t\t\t\t\tcase 'type':\r\n\t\t\t\t\t\t\tvalue = ObjTypes[value].toLowerCase();\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'endx': \t\r\n\t\t\t\t\t\tcase 'endy': \t\t\r\n\t\t\t\t\t\t\tcontinue;\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif( is_att ) {\r\n\t\t\t\t\t\tvals[pname] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tdata[pname] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif( is_code ) {\r\n\t\t\t\tvals[name] = code.join( '\\n' );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif( name!=\"att\" ) {\r\n\t\t\t\t\tvals[name] = data;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn vals;\r\n\t}\r\n}\r\n\r\n/**\r\n * a Page representation\r\n */\r\n\r\nclass HMIPage {\r\n\t\r\n\tread( reader: Reader, cat: HMICatalog ) {\r\n\r\n\t\tconst header = new HMIPageHeader( );\r\n\t\theader.read( reader, cat.offset );\r\n\t\t//console.log( cat.name, header );\r\n\r\n\t\tconst components = header.catalog.map( x => {\r\n\t\t\tconst com = new HMIComponent( );\r\n\t\t\treturn com.read( reader, x );\r\n\t\t} );\r\n\r\n\t\tlet page: any = {};\r\n\t\tif( components[0].type=='page' ) {\r\n\t\t\tpage = components.shift( );\r\n\t\t}\r\n\r\n\t\tpage.offset = cat.offset;\r\n\r\n\t\treturn {\r\n\t\t\theader: page,\r\n\t\t\tcomponents\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass HMIMain {\r\n\r\n\tread( reader: Reader, cat: HMICatalog ) {\r\n\r\n\t\t// \r\n\t\treader.seek( cat.offset+0x1c );\r\n\t\tconst count = reader.readI32( );\r\n\t\tconst memalloc = reader.readI32( );\r\n\t\treader.seek( 0x3c, 1 );\r\n\r\n\t\tconst order: Record<string,string>[ ] = [];\r\n\r\n\t\tfor( let i=0; i<count; i++ ) {\r\n\t\t\tconst type = reader.readStr( 8 );\r\n\t\t\tconst file = reader.readStr( 8 );\r\n\r\n\t\t\torder.push( {type,file} )\r\n\t\t}\r\n\r\n\t\treturn order;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * \r\n */\r\n\r\nclass HMIFile {\r\n    \r\n\tread( reader: Reader ) {\r\n\t\tconst count = reader.readI32( );\r\n\t\tconst catalog: HMICatalog[] = []\r\n\r\n\t\tfor( let i=0; i<count; i++ ) {\r\n\t\t\tconst obj = new HMICatalog( );\r\n\t\t\tobj.read( reader );\r\n\r\n\t\t\tif( !obj.deleted ) {\r\n\t\t\t\tcatalog.push(obj);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// search the main representation\r\n\t\tconst main = catalog.find( ( x ) => {\r\n\t\t\treturn x.name==\"main.HMI\";\r\n\t\t})\r\n\r\n\t\tconst m = new HMIMain( );\r\n\t\tconst order = m.read( reader, main ).filter( p => p.type=='pa' );;\r\n\t\t//console.log( order );\r\n\t\t\r\n\t\t// extract pages\r\n\t\tconst pges = catalog.filter( x => isPage(x.name) );\r\n\t\tconst pages = pges.map( x => {\r\n\t\t\tconst pge = new HMIPage( );\r\n\t\t\tconst res = pge.read( reader, x );\r\n\r\n\t\t\tres.header.id = order.findIndex( p => p.file==x.name );\r\n\t\t\treturn res;\r\n\t\t})\r\n\r\n\t\tpages.sort( (a, b) => a.header.id-b.header.id );\r\n\r\n\t\treturn {\r\n\t\t\tmain,\r\n\t\t\tpages\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nfunction gen_c_headers( content, output ) {\r\n\r\n\tconst code: string[] = [];\r\n\r\n\tcontent.pages.forEach( (p) => {\r\n\t\tconst pname: string = p.header.objname.toUpperCase();\r\n\t\tcode.push( `#define\\tPAGE_ID_${pname} ${p.header.id}` );\r\n\r\n\t\tp.components.forEach( c=> {\r\n\t\t\tconst cname: string = c.objname.toUpperCase();\r\n\t\t\tcode.push( `#define\\t\\tPAGE_${pname}_${cname} ${c.id}   // ${c.type}` );\r\n\t\t\tcode.push( `#define\\t\\tPAGE_${pname}_${cname}_NAME \"${c.objname}\"` );\r\n\t\t})\r\n\r\n\t\tcode.push(\"\");\r\n\t});\r\n\r\n\r\n\tfs.writeFileSync( output, code.join('\\n') );\r\n}\r\n\r\n\r\n\r\n\r\nfunction main( input: string, options: any ) {\r\n\r\n\tconst data = fs.readFileSync( input );\r\n\tconst reader = new Reader( data );\r\n\r\n\tconst hmiHeader = new HMIFile( );\r\n\tconst content = hmiHeader.read( reader );\r\n\r\n\tconst output = options.output ?? input.replace( /\\.hmi$/i, '' )+\".h\";\r\n\tgen_c_headers( content, output );\r\n\r\n\t// write extraction\r\n\t//fs.writeFileSync( \"out/pages.json\", JSON.stringify(content,undefined,4));\r\n}\r\n\r\n\r\n\r\nprogram\r\n\t.version('1.0')\r\n\t.description('Extract c header from nextion hmi file')\r\n\t.arguments('<path>')\r\n\t.option('-o, --output [output]', 'Output file name', null)\r\n\t.action( function(path,options) {\r\n\t\tmain( path, options );\r\n\t})\r\n\r\nprogram.parse(process.argv);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "export enum ObjTypes {\r\n\tPage = 121,\r\n\tVariable = 52,\r\n\tNumber = 54,\r\n\tXFloat = 59,\r\n\tText = 116,\r\n\tScrollingText = 55 ,\r\n\tPicture = 112 ,\r\n\tCropPicture = 113 ,\r\n\tQRCode = 58 ,\r\n\tProgressBar = 106 ,\r\n\tGauge = 122 ,\r\n\tWaveform = 0 ,\r\n\tSlider = 1 ,\r\n\tButton = 98 ,\r\n\tDualStateButton = 53 ,\r\n\tCheckbox = 56 ,\r\n\tRadio = 57 ,\r\n\tSwitch = 67 ,\r\n\tComboBox = 61 ,\r\n\tTextSelect = 68 ,\r\n\tSLText = 62 ,\r\n\tAudio = 4 ,\r\n\tExternalPicture = 60 ,\r\n\tGmov = 2 ,\r\n\tVideo = 3 ,\r\n\tDataRecord = 66 ,\r\n\tFileStream = 63 ,\r\n\tFileBrowser = 65 ,\r\n\tHotspot = 109 ,\r\n\tTimer = 51,\r\n\tUnknown = -1,\r\n}\r\n", "import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help\n} = commander;\n"],
  "mappings": "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",
  "names": ["require_error", "__commonJSMin", "exports", "CommanderError", "exitCode", "code", "message", "InvalidArgumentError", "require_argument", "__commonJSMin", "exports", "InvalidArgumentError", "Argument", "name", "description", "value", "previous", "fn", "values", "arg", "humanReadableArgName", "nameOutput", "require_help", "__commonJSMin", "exports", "humanReadableArgName", "Help", "cmd", "visibleCommands", "helpName", "helpArgs", "helpCommand", "a", "b", "getSortKey", "option", "visibleOptions", "showShortHelpFlag", "showLongHelpFlag", "helpOption", "globalOptions", "ancestorCmd", "argument", "args", "arg", "helper", "max", "command", "cmdName", "ancestorCmdNames", "extraInfo", "choice", "extraDescripton", "termWidth", "helpWidth", "itemIndentWidth", "itemSeparatorWidth", "formatItem", "term", "description", "fullText", "formatList", "textArray", "output", "commandDescription", "argumentList", "optionList", "globalOptionList", "commandList", "str", "width", "indent", "minColumnWidth", "indents", "manualIndent", "columnWidth", "leadingStr", "columnText", "indentString", "breaks", "regex", "lines", "line", "i", "require_option", "__commonJSMin", "exports", "InvalidArgumentError", "Option", "flags", "description", "optionFlags", "splitOptionFlags", "value", "arg", "names", "impliedOptionValues", "newImplied", "name", "fn", "mandatory", "hide", "previous", "values", "camelcase", "DualOptions", "options", "option", "key", "optionKey", "preset", "negativeValue", "str", "word", "shortFlag", "longFlag", "flagParts", "require_suggestSimilar", "__commonJSMin", "exports", "editDistance", "b", "d", "j", "i", "cost", "suggestSimilar", "word", "candidates", "searchingOptions", "candidate", "similar", "bestDistance", "minSimilarity", "distance", "length", "a", "require_command", "__commonJSMin", "exports", "EventEmitter", "childProcess", "path", "fs", "process", "Argument", "humanReadableArgName", "CommanderError", "Help", "Option", "splitOptionFlags", "DualOptions", "suggestSimilar", "Command", "_Command", "name", "str", "write", "sourceCommand", "result", "command", "nameAndArgs", "actionOptsOrExecDesc", "execOpts", "desc", "opts", "args", "cmd", "configuration", "displayHelp", "displaySuggestion", "description", "fn", "defaultValue", "argument", "names", "detail", "previousArgument", "enableOrNameAndArgs", "event", "listener", "allowedValues", "err", "exitCode", "code", "message", "expectedArgsCount", "actionArgs", "flags", "target", "value", "previous", "invalidArgumentMessage", "option", "oname", "positiveLongFlag", "handleOptionValue", "val", "invalidValueMessage", "valueSource", "oldValue", "config", "regex", "def", "m", "parseArg", "combine", "allowUnknown", "allowExcess", "positional", "passThrough", "storeAsProperties", "key", "source", "argv", "parseOptions", "userArgs", "subcommand", "launchWithNode", "sourceExt", "findFile", "baseDir", "baseName", "localBin", "foundExt", "ext", "executableFile", "executableDir", "resolvedScriptPath", "localFile", "legacyName", "proc", "incrementNodeInspectorPort", "signal", "exitCallback", "executableDirMessage", "executableMissing", "wrappedError", "commandName", "operands", "unknown", "subCommand", "promiseChain", "subcommandName", "arg", "i", "myParseArg", "parsedValue", "processedArgs", "declaredArg", "index", "processed", "v", "promise", "hooks", "hookedCommand", "callback", "hookDetail", "hook", "parsed", "outputHelpIfRequested", "checkForUnknownOptions", "commandEvent", "anOption", "definedNonDefaultOptions", "optionKey", "conflictingAndDefined", "defined", "dest", "maybeOption", "activeVariadicOption", "len", "combinedOptions", "errorOptions", "dualHelper", "hasCustomOptionValue", "impliedKey", "conflictingOption", "findBestOptionFromValue", "optionValue", "negativeOption", "positiveOption", "getErrorMessage", "bestOption", "flag", "suggestion", "candidateFlags", "moreFlags", "receivedArgs", "expected", "s", "unknownName", "candidateNames", "versionOption", "argsDescription", "alias", "aliases", "filename", "contextOptions", "helper", "context", "deprecatedCallback", "helpInformation", "helpFlags", "position", "text", "helpEvent", "helpStr", "debugOption", "debugHost", "debugPort", "match", "require_commander", "__commonJSMin", "exports", "module", "Argument", "Command", "CommanderError", "InvalidArgumentError", "Help", "Option", "fs", "ObjTypes", "import_index", "program", "createCommand", "createArgument", "createOption", "CommanderError", "InvalidArgumentError", "InvalidOptionArgumentError", "Command", "Argument", "Option", "Help", "commander", "ascii_decoder", "utf8_decoder", "Reader", "buffer", "offset", "from", "rc", "length", "utf8", "data", "str", "isPage", "name", "HMICatalog", "reader", "HMIPageCatalog", "base", "HMIPageHeader", "offset", "self_base", "i", "com", "HMIComponent", "cat", "vals", "size", "ns", "name", "sc", "count", "data", "code", "is_code", "is_att", "pname", "value", "ObjTypes", "HMIPage", "header", "components", "x", "page", "HMIMain", "memalloc", "order", "type", "file", "HMIFile", "catalog", "obj", "main", "p", "pages", "isPage", "res", "a", "b", "gen_c_headers", "content", "output", "c", "cname", "input", "options", "Reader", "program", "path"]
}
